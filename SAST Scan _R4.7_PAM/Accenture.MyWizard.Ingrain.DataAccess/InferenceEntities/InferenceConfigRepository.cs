using Accenture.MyWizard.Ingrain.DataModels.InferenceEngineModel;
using MongoDB.Bson;
using MongoDB.Driver;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Text;
using Accenture.MyWizard.Shared.Helpers;
using Microsoft.Extensions.Options;

namespace Accenture.MyWizard.Ingrain.DataAccess.InferenceEntities
{
    public class InferenceConfigRepository
    {
        private IOptions<IngrainAppSettings> appSettings { get; set; }
        EncryptionDecryption encryptionDecryption;
        private IMongoDatabase _database;
        public string SavedConfigCollection { get; set; }
        public string ResultsCollection { get; set; }

        public string FeatureCombination { get; set; }
        public string IEConfigCollection { get; set; }

        public string IEModelsCollection { get; set; }

        public string IEPreprocessedData { get; set; }
        public InferenceConfigRepository(IMongoDatabase database, string aes, string vector, bool IsAESKeyVault)
        {
            _database = database;
            SavedConfigCollection = "IE_SavedConfig";
            ResultsCollection = "IE_SavedConfigResults";
            FeatureCombination = "IE_FeatureCombination";
            IEConfigCollection = "IE_Config";
            IEModelsCollection = "IEModels";
            IEPreprocessedData = "IE_PreprocessedData";

            //appSettings = settings;
            encryptionDecryption = new EncryptionDecryption(aes, vector, IsAESKeyVault);
        }

        /// <summary>
        /// Get IE based on correlation id
        /// </summary>
        /// <param name="correlationId"></param>
        /// <returns>flush status</returns>
        public IEModel GetIEModelEncryption(string correlationId)
        {
            var collection = _database.GetCollection<IEModel>(IEModelsCollection);
            var builder = Builders<IEModel>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            var projection = Builders<IEModel>.Projection.Exclude("_id");
            return collection.Find(filter).Project<IEModel>(projection).FirstOrDefault();
        }

        public List<IESavedConfig> GetIEConfig(string correlationId, string inferenceConfigId, string applicationId, bool includeAutoGenerated)
        {
            List<IESavedConfig> resp = new List<IESavedConfig>();
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            filter = !string.IsNullOrEmpty(inferenceConfigId) ? filter & builder.Where(x => x.InferenceConfigId == inferenceConfigId) : filter;
            filter = includeAutoGenerated ? filter & (builder.Where(x => x.InferenceSourceType == "Manual") | builder.Where(x => x.InferenceSourceType == "AutoGenerated"))
                : filter & builder.Where(x => x.InferenceSourceType == "Manual");

            var projection = Builders<IESavedConfig>.Projection.Exclude("_id");
            var result =  collection.Find(filter).Project<IESavedConfig>(projection).SortBy(item => item.CreatedOn).ToList();
            if(result.Count > 0)
            {
                foreach(var rec in result)
                {
                    if (rec != null)
                    {
                        var encryption = GetIEModelEncryption(correlationId);
                        if (encryption.DBEncryptionRequired)
                        {
                            if(rec.FilterValues != null && rec.InferenceConfigType == "MeasureAnalysis")
                            {
                                rec.FilterValues = encryptionDecryption.Decrypt(rec.FilterValues);
                            }

                            try
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(rec.CreatedBy)))
                                {
                                    rec.CreatedBy = encryptionDecryption.Decrypt(Convert.ToString(rec.CreatedBy));
                                }
                            }
                            catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetIEConfig) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                            try
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(rec.ModifiedBy)))
                                {
                                    rec.ModifiedBy = encryptionDecryption.Decrypt(Convert.ToString(rec.ModifiedBy));
                                }
                            }
                            catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetIEConfig) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                        }
                        resp.Add(rec);
                    }
                }
            }

            return resp;

        }
        public List<IESavedConfig> GetAllIEConfigs(string correlationId, bool includeAutoGenerated)
        {
            try
            {
                List<IESavedConfig> resp = new List<IESavedConfig>();
                var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
                var builder = Builders<IESavedConfig>.Filter;
                var filter = builder.Where(x => x.CorrelationId == correlationId);

                filter = includeAutoGenerated ? filter & (builder.Where(x => x.InferenceSourceType == "Manual") | builder.Where(x => x.InferenceSourceType == "AutoGenerated"))
                    : filter & builder.Where(x => x.InferenceSourceType == "Manual");

                var projection = Builders<IESavedConfig>.Projection.Exclude("_id");
                var result = collection.Find(filter).Project<IESavedConfig>(projection).ToList();
                if (result.Count > 0)
                {
                    foreach (var rec in result)
                    {
                        if (rec != null)
                        {
                            var encryption = GetIEModelEncryption(correlationId);
                            if (encryption.DBEncryptionRequired && rec.InferenceConfigType == "MeasureAnalysis")
                            {
                                if (rec.FilterValues != null)
                                {
                                    rec.FilterValues = encryptionDecryption.Decrypt(rec.FilterValues);
                                }
                            }
                            if (encryption.DBEncryptionRequired)
                            { 
                                try
                                {
                                    if (!string.IsNullOrEmpty(Convert.ToString(rec.CreatedBy)))
                                    {
                                        rec.CreatedBy = encryptionDecryption.Decrypt(Convert.ToString(rec.CreatedBy));
                                    }
                                }
                                catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetAllIEConfigs) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                                try
                                {
                                    if (!string.IsNullOrEmpty(Convert.ToString(rec.ModifiedBy)))
                                    {
                                        rec.ModifiedBy = encryptionDecryption.Decrypt(Convert.ToString(rec.ModifiedBy));
                                    }
                                }
                                catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetAllIEConfigs) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                            }
                            resp.Add(rec);
                        }
                    }
                }
                return resp;
            }
            catch(Exception ex)
            {
                throw new Exception("CorrelationId- " + correlationId + "-" + ex.StackTrace);
            }
           

           
        }



        public List<IESavedConfig> GetDevIEConfigs(string correlationId, bool includeAutoGenerated)
        {
            try
            {
                List<IESavedConfig> resp = new List<IESavedConfig>();
                var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
                var builder = Builders<IESavedConfig>.Filter;
                var filter = builder.Where(x => x.CorrelationId == correlationId);

                filter = includeAutoGenerated ? filter & (builder.Where(x => x.InferenceSourceType == "Manual") | builder.Where(x => x.InferenceSourceType == "AutoGenerated"))
                    : filter & builder.Where(x => x.InferenceSourceType == "Manual");

                var projection = Builders<IESavedConfig>.Projection.Exclude("_id");
                var result = collection.Find(filter).Project<IESavedConfig>(projection).ToList();
                if (result.Count > 0)
                {
                    resp = result;
                }

                return resp;
            }
            catch (Exception ex)
            {
                throw new Exception("CorrelationId- " + correlationId + "-" + ex.StackTrace);
            }



        }

        public void DeleteIEConfig(string inferenceConfigId, string inferenceConfigType)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.InferenceConfigId == inferenceConfigId)
                & builder.Where(x => x.InferenceConfigType == inferenceConfigType);
            collection.DeleteOne(filter);
        }

        public void InsertIEConfig(IESavedConfig inferenceConfig)
        {

            var encryption = GetIEModelEncryption(inferenceConfig.CorrelationId);
            if (encryption.DBEncryptionRequired)
            {
                if (inferenceConfig.FilterValues != null)
                {
                    inferenceConfig.FilterValues = encryptionDecryption.Encrypt(inferenceConfig.FilterValues);
                }
                //if (!string.IsNullOrEmpty(Convert.ToString(inferenceConfig.CreatedBy)))
                //{
                //    inferenceConfig.CreatedBy = encryptionDecryption.Encrypt(Convert.ToString(inferenceConfig.CreatedBy));
                //}
                //if (!string.IsNullOrEmpty(Convert.ToString(inferenceConfig.ModifiedBy)))
                //{
                //    inferenceConfig.ModifiedBy = encryptionDecryption.Encrypt(Convert.ToString(inferenceConfig.ModifiedBy));
                //}
            }

            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            collection.InsertOne(inferenceConfig);
        }


        public IESavedConfigResults GetInferenceResults(string inferenceConfigId, string inferenceConfigType)
        {            
            var collection = _database.GetCollection<IESavedConfigResults>(ResultsCollection);
            var builder = Builders<IESavedConfigResults>.Filter;
            var filter = builder.Where(x => x.InferenceConfigId == inferenceConfigId)
                         & builder.Where(x => x.InferenceConfigType == inferenceConfigType);
            var projection = Builders<IESavedConfigResults>.Projection.Exclude("_id");
            var Data = collection.Find(filter).Project<IESavedConfigResults>(projection).ToList();//FirstOrDefault();           
            foreach (var data in Data)
            {               
                var encryption = GetIEModelEncryption(data.CorrelationId);
                if (encryption != null && encryption.DBEncryptionRequired)
                {                    
                    data.InferenceResults = encryptionDecryption.Decrypt(data.InferenceResults);
                    try
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(data.CreatedBy)))
                        {
                            data.CreatedBy = encryptionDecryption.Decrypt(Convert.ToString(data.CreatedBy));
                        }
                    }
                    catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetInferenceResults) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                    try
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(data.ModifiedBy)))
                        {
                            data.ModifiedBy = encryptionDecryption.Decrypt(Convert.ToString(data.ModifiedBy));
                        }
                    }
                    catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetInferenceResults) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                    return data;
                }
            }
            return null;            
        }

        public void DeleteInferenceResults(string inferenceConfigId, string inferenceConfigType)
        {
            var collection = _database.GetCollection<IESavedConfigResults>(ResultsCollection);
            var builder = Builders<IESavedConfigResults>.Filter;
            var filter = builder.Where(x => x.InferenceConfigId == inferenceConfigId)
                         & builder.Where(x => x.InferenceConfigType == inferenceConfigType);
            collection.DeleteOne(filter);
        }


        public IEConfig GetConfig(string correlationId)
        {
            var collection = _database.GetCollection<IEConfig>(IEConfigCollection);
            var builder = Builders<IEConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            var projection = Builders<IEConfig>.Projection.Exclude("_id");//.Include("DateColumnList").Include("DimensionsList").Include("MetricColumnList").Include("CorrelationId");
            var data = collection.Find(filter).Project<IEConfig>(projection).FirstOrDefault();
            if (data != null)
            {
                var encryption = GetIEModelEncryption(correlationId);
                if (encryption.DBEncryptionRequired)
                {

                    data.FilterValues = encryptionDecryption.Decrypt(data.FilterValues);
                    try
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(data.CreatedBy)))
                        {
                            data.CreatedBy = encryptionDecryption.Decrypt(Convert.ToString(data.CreatedBy));
                        }
                    }
                    catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetConfig) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                    try
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(data.ModifiedBy)))
                        {
                            data.ModifiedBy = encryptionDecryption.Decrypt(Convert.ToString(data.ModifiedBy));
                        }
                    }
                    catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetConfig) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                }
            }
            return data;
        }




        public void BackupIEConfig(string correlationId)
        {
            var collection = _database.GetCollection<IEConfig>(IEConfigCollection);
            var builder = Builders<IEConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            var projection = Builders<IEConfig>.Projection.Exclude("_id");//.Include("DateColumnList").Include("DimensionsList").Include("MetricColumnList").Include("CorrelationId");
            var result = collection.Find(filter).Project<IEConfig>(projection).FirstOrDefault();
            if (result != null)
            {
                result.CorrelationId = result.CorrelationId + "_backup";
                collection.InsertOne(result);
            }
        }

        public void RestoreIEConfig(string correlationId)
        {
            var collection = _database.GetCollection<IEConfig>(IEConfigCollection);
            var builder = Builders<IEConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);

            //remove new record
            collection.DeleteOne(filter);

            //restore the old record
            var filterBackup = builder.Where(x => x.CorrelationId == correlationId + "_backup");
            var update = Builders<IEConfig>.Update.Set(x => x.CorrelationId, correlationId);
            collection.UpdateOne(filterBackup, update);

        }





        public void DeleteConfig(string correlationId)
        {
            var collection = _database.GetCollection<IEConfig>(IEConfigCollection);
            var builder = Builders<IEConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            collection.DeleteMany(filter);
        }


        public void InsertFeatureCombination(IEFeatureCombination featureCombination)
        {
            var encryption = GetIEModelEncryption(featureCombination.CorrelationId);
            if (encryption.DBEncryptionRequired)
            {
                featureCombination.FilterValues = encryptionDecryption.Encrypt(featureCombination.FilterValues);
                if (!string.IsNullOrEmpty(Convert.ToString(featureCombination.ModifiedBy)))
                {
                    featureCombination.ModifiedBy = encryptionDecryption.Encrypt(Convert.ToString(featureCombination.ModifiedBy));
                }
            }
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            collection.InsertOne(featureCombination);
        }

        public IEFeatureCombination GetFeatureCombination(string correlationId, string metricColumn, string dateColumn)
        {
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            var builder = Builders<IEFeatureCombination>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId)
                & builder.Where(x => x.MetricColumn == metricColumn)
                & builder.Where(x => x.DateColumn == dateColumn);
            var projection = Builders<IEFeatureCombination>.Projection.Exclude("_id");//.Include("DateColumnList").Include("DimensionsList").Include("MetricColumnList").Include("CorrelationId");
            var data = collection.Find(filter).Project<IEFeatureCombination>(projection).FirstOrDefault();
            if (data != null)
            {
                var encryption = GetIEModelEncryption(correlationId);
                if (encryption.DBEncryptionRequired)
                {
                    if (data.FilterValues != null)
                    {
                        data.FilterValues = encryptionDecryption.Decrypt(data.FilterValues);
                    }
                    try
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(data.ModifiedBy)))
                        {
                            data.ModifiedBy = encryptionDecryption.Decrypt(Convert.ToString(data.ModifiedBy));
                        }
                    }
                    catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetFeatureCombination) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                }
            }
            return data;
        }

        public void BackupFeatureComb(string correlationId)
        {
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            var builder = Builders<IEFeatureCombination>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            var projection = Builders<IEFeatureCombination>.Projection.Exclude("_id");
            var result = collection.Find(filter).Project<IEFeatureCombination>(projection).ToList();

            if (result.Count > 0)
            {
                foreach (var rec in result)
                {
                    rec.CorrelationId = correlationId + "_backup";
                    collection.InsertOne(rec);
                }
            }
        }


        public void RestoreFeatureComb(string correlationId)
        {
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            var builder = Builders<IEFeatureCombination>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);

            //remove new records
            collection.DeleteMany(filter);

            //restore old records
            var filterBackup = builder.Where(x => x.CorrelationId == correlationId + "_backup");
            var update = Builders<IEFeatureCombination>.Update.Set(x => x.CorrelationId, correlationId);
            collection.UpdateMany(filterBackup, update);

        }

        public IEFeatureCombination GetFeatureCombinationOnId(string correlationId, string requestId)
        {
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            var builder = Builders<IEFeatureCombination>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId)
                & builder.Where(x => x.RequestId == requestId);
            var projection = Builders<IEFeatureCombination>.Projection.Exclude("_id");//.Include("DateColumnList").Include("DimensionsList").Include("MetricColumnList").Include("CorrelationId");
            var data = collection.Find(filter).Project<IEFeatureCombination>(projection).FirstOrDefault();
            if (data != null)
            {
                var encryption = GetIEModelEncryption(correlationId);
                if (encryption.DBEncryptionRequired)
                {
                    data.FilterValues = encryptionDecryption.Decrypt(data.FilterValues);
                    try
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(data.ModifiedBy)))
                        {
                            data.ModifiedBy = encryptionDecryption.Decrypt(Convert.ToString(data.ModifiedBy));
                        }
                    }
                    catch (Exception ex) { LOGGING.LogManager.Logger.LogProcessInfo(typeof(InferenceConfigRepository), nameof(GetFeatureCombinationOnId) + "User is already decrypted....", ex.Message, default(Guid), string.Empty, string.Empty, string.Empty, string.Empty); }
                }
            }
            return data;
        }

        public List<IESavedConfig> GetSAvedIConfigOnId(string correlationId, string inferenceConfigId)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId)
                & builder.Where(x => x.InferenceConfigId == inferenceConfigId);
            var projection = Builders<IESavedConfig>.Projection.Exclude("_id");
            return collection.Find(filter).Project<IESavedConfig>(projection).ToList();

        }

        public void BackupSavedConfig(string correlationId)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId) & builder.Where(x => x.InferenceSourceType == "Manual");
            var projection = Builders<IESavedConfig>.Projection.Exclude("_id");
            var result = collection.Find(filter).Project<IESavedConfig>(projection).ToList();

            if (result.Count > 0)
            {
                foreach (var rec in result)
                {
                    rec.CorrelationId = correlationId + "_backup";
                    collection.InsertOne(rec);
                }
            }

        }

        public void RestoreSavedConfig(string correlationId)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId) & builder.Where(x => x.InferenceSourceType == "Manual");

            //delete new record
            collection.DeleteMany(filter);

            //restore old record
            var filterBackup = Builders<IESavedConfig>.Filter.Where(x => x.CorrelationId == correlationId + "_backup");
            var update = Builders<IESavedConfig>.Update.Set(x => x.CorrelationId, correlationId);
            collection.UpdateMany(filterBackup, update);
        }

        public void UpdateIEConfig(IESavedConfig savedConfig)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == savedConfig.CorrelationId)
                & builder.Where(x => x.InferenceConfigId == savedConfig.InferenceConfigId)
                & builder.Where(x => x.InferenceConfigType == savedConfig.InferenceConfigType);

            var update = Builders<IESavedConfig>.Update.Set(x => x.Dimensions, savedConfig.Dimensions)
                                                       .Set(x => x.Features, savedConfig.Features)
                                                       .Set(x => x.FeatureCombinations, savedConfig.FeatureCombinations)
                                                       .Set(x => x.ModifiedOn, DateTime.UtcNow);

            collection.UpdateOne(filter, update);

        }

        public bool DeleteFeatureCombination(string correlationId, string requestId)
        {
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            var builder = Builders<IEFeatureCombination>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId)
                & builder.Where(x => x.RequestId == requestId);
            collection.DeleteOne(filter);
            return true;
        }

        public void InsertIEPublishedConfigs(List<IEPublishedConfigs> iEPublishedConfigs)
        {
            for (var i = 0; i< iEPublishedConfigs.Count ; i++)
            {
                var encryption = GetIEModelEncryption(Convert.ToString(iEPublishedConfigs[i].CorrelationId));
                if (encryption.DBEncryptionRequired)
                {
                    if (!string.IsNullOrEmpty(Convert.ToString(iEPublishedConfigs[i].CreatedBy)))
                    {
                        iEPublishedConfigs[i].CreatedBy = encryptionDecryption.Encrypt(Convert.ToString(iEPublishedConfigs[i].CreatedBy));
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(iEPublishedConfigs[i].ModifiedBy)))
                    {
                        iEPublishedConfigs[i].ModifiedBy = encryptionDecryption.Encrypt(Convert.ToString(iEPublishedConfigs[i].ModifiedBy));
                    }
                }
            }
            var collection = _database.GetCollection<IEPublishedConfigs>("IE_PublishedConfigs");
            collection.InsertMany(iEPublishedConfigs);
        }
        public bool DeletePublishedConfig(string correlationId)
        {
            var collection = _database.GetCollection<IEPublishedConfigs>("IE_PublishedConfigs");
            var builder = Builders<IEPublishedConfigs>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            collection.DeleteMany(filter);
            return true;
        }

        public bool GetPublishedConfigOnId(string correlationId, string applicationId)
        {
            bool isExist = false;
            var collection = _database.GetCollection<IEPublishedConfigs>("IE_PublishedConfigs");
            var builder = Builders<IEPublishedConfigs>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId)
                & builder.Where(x => x.ApplicationId == applicationId);
            var projection = Builders<IEPublishedConfigs>.Projection.Exclude("_id");
            var result = collection.Find(filter).Project<IEPublishedConfigs>(projection).ToList();
            if (result.Count > 0)
            {
                isExist = true;
            }
            return isExist;
        }

        public List<IEPublishedConfigs> GetPublishedConfigs(string correlationId, string inferenceConfigId, string applicationId)
        {
            var collection = _database.GetCollection<IEPublishedConfigs>("IE_PublishedConfigs");
            var builder = Builders<IEPublishedConfigs>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            filter = !string.IsNullOrEmpty(inferenceConfigId) ? filter & builder.Where(x => x.InferenceConfigId == inferenceConfigId) : filter;
            filter = !string.IsNullOrEmpty(applicationId) ? filter & builder.Where(x => x.ApplicationId.Contains(applicationId)) : filter;

            var projection = Builders<IEPublishedConfigs>.Projection.Exclude("_id");
            return collection.Find(filter).Project<IEPublishedConfigs>(projection).ToList();

        }


        /// <summary>
        /// Delete Inference Result
        /// </summary>
        /// <param name="correlationId"></param>
        public void DeleteInferenceResults(string correlationId)
        {
            var collection = _database.GetCollection<IESavedConfigResults>(ResultsCollection);
            var builder = Builders<IESavedConfigResults>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            collection.DeleteMany(filter);
        }


        public void BackUpResults(string correlationId)
        {
            var collection = _database.GetCollection<IESavedConfigResults>(ResultsCollection);
            var builder = Builders<IESavedConfigResults>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            var projection = Builders<IESavedConfigResults>.Projection.Exclude("_id");
            var result = collection.Find(filter).Project<IESavedConfigResults>(projection).ToList();

            if (result.Count > 0)
            {
                foreach (var rec in result)
                {
                    rec.CorrelationId = correlationId + "_backup";
                    collection.InsertOne(rec);
                }
            }
        }


        public void RestoreResults(string correlationId)
        {
            var collection = _database.GetCollection<IESavedConfigResults>(ResultsCollection);
            var builder = Builders<IESavedConfigResults>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);

            //delete new record
            collection.DeleteMany(filter);

            //restore old record
            var filterBackup = Builders<IESavedConfigResults>.Filter.Where(x => x.CorrelationId == correlationId + "_backup");
            var update = Builders<IESavedConfigResults>.Update.Set(x => x.CorrelationId, correlationId);

            collection.UpdateMany(filterBackup, update);

        }

        /// <summary>
        /// Delete IE Config
        /// </summary>
        /// <param name="correlationId"></param>
        public void DeleteIEConfig(string correlationId)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            collection.DeleteMany(filter);
        }

        /// <summary>
        /// Delete FeatureCombination
        /// </summary>
        /// <param name="correlationId"></param>
        /// <param name="requestId"></param>
        /// <returns></returns>
        public bool DeleteFeatureCombination(string correlationId)
        {
            var collection = _database.GetCollection<IEFeatureCombination>(FeatureCombination);
            var builder = Builders<IEFeatureCombination>.Filter;
            var filter = builder.Where(x => x.CorrelationId == correlationId);
            collection.DeleteMany(filter);
            return true;
        }

        public bool DeletePublishedConfigOnId(string infereneConfigId)
        {
            var collection = _database.GetCollection<IEPublishedConfigs>("IE_PublishedConfigs");
            var builder = Builders<IEPublishedConfigs>.Filter;
            var filter = builder.Where(x => x.InferenceConfigId == infereneConfigId);
            collection.DeleteMany(filter);
            return true;
        }


        public List<BsonDocument> GetIEPreprocessedData(string correlationId)
        {
            var collection = _database.GetCollection<BsonDocument>(IEPreprocessedData);
            var builder = Builders<BsonDocument>.Filter;
            var filter = builder.Eq("CorrelationId", correlationId);
            var projection = Builders<BsonDocument>.Projection.Include("InputData").Exclude("_id");//.Include("DateColumnList").Include("DimensionsList").Include("MetricColumnList").Include("CorrelationId");
            var inputData = collection.Find(filter).Project<BsonDocument>(projection).ToList();
            return inputData;
            //var encryption = GetIEModelEncryption(correlationId);
            //if (inputData.Count > 0)
            //{
            //    for (int i = 0; i < inputData.Count; i++)
            //    {
            //        if (encryption.DBEncryptionRequired)
            //        {

            //            data = encryptionDecryption.Decrypt(inputData[i]["InputData"].AsString);
            //        }
            //    }
            //    return data;
            //}



        }


        public void UpdateEncrySavedConfig(IESavedConfig config)
        {
            var collection = _database.GetCollection<IESavedConfig>(SavedConfigCollection);
            var builder = Builders<IESavedConfig>.Filter;
            var filter = builder.Where(x => x.CorrelationId == config.CorrelationId) & builder.Where(x => x.InferenceConfigType == config.InferenceConfigType) & builder.Where(x => x.InferenceSourceType == config.InferenceSourceType) & builder.Where(x => x.InferenceConfigId == config.InferenceConfigId);
            var update = Builders<IESavedConfig>.Update.Set("FilterValues", config.FilterValues);
            collection.UpdateOne(filter, update);
        }

    }
}
