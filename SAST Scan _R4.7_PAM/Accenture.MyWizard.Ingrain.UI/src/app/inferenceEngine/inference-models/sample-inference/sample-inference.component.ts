import { AfterViewInit, ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { InfoTextService } from '../../info-text/info-text.service';

@Component({
  selector: 'app-sample-inference',
  templateUrl: './sample-inference.component.html',
  styleUrls: ['./sample-inference.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SampleInferenceComponent implements OnInit, AfterViewInit {
  @Input() autoSampleGeneratedIE;
  @Input() showAddButton;
  InferenceConfigTypeForDataInflow = 'VolumetricAnalysis';
  InferenceConfigTypeForMeasureflow = "MeasureAnalysis"
 
  configDetail = 'InferenceConfigDetails';
  configResutls = 'InferenceResults';

  inputInflowDataToBeShown;
  inputInflowMeasureToBeShown;
  outputInflowDataToBeShown;
  outputInflowMeasureToBeShown;

  modelName;
  correlationId;

  generateDataAnalysis;
  generateMeasureAnalysis;
  outputDisplay = true;


  dateTypeIconInfo;
  measureIconInfo;

  
  measureaccordian = {
    'acc0': false,
    'acc1': false,
    'expandAll': false
  }

  dataInflowaccordian = {
    'accOutput0': false,
    'accOutput1': false,
    'accOutput2': false,
    'expandAll': false
  }

  constructor(public router: Router, private service: InfoTextService) { 
    this.dateTypeIconInfo = this.service.dateTypeIconInfo;
    this.measureIconInfo = this.service.measureIconInfo;
  }

  ngAfterViewInit(): void {                 
      const className = 'example-element-row'+ this.autoSampleGeneratedIE[0].CorrelationId;
      if (document.getElementsByClassName(className)[0] ) {
        document.getElementsByClassName(className)[0].scrollIntoView();
      }
  }
  
  ngOnInit(): void {
    this.generateDataAnalysis = [];
    this.generateMeasureAnalysis = [];
    this.setConfigVariables();
    this.autoSampleGeneratedIE.forEach( result => {
      if ( result.InferenceConfigType === this.InferenceConfigTypeForDataInflow) {
         const v = result[this.configDetail]; // ConfigDetails means Input block
         const e = this.inputInflowDataToBeShown
         e['DateColumn'] = v.DateColumn;
         e['TrendForecast'] = v.TrendForecast;
         e['Frequency'] = v.Frequency;
         e['Dimensions'] = v.Dimensions;

         const w = result[this.configResutls];
         const f = this.outputInflowDataToBeShown
         f['VolumetricInferences'] = w[0]?.VolumetricInferences;
         
       
      }


      if ( result.InferenceConfigType === this.InferenceConfigTypeForMeasureflow) {
        const v = result[this.configDetail]; // ConfigDetails means Input block
        const e = this.inputInflowMeasureToBeShown
        e['DateColumn'] = v.DateColumn;
        e['MetricColumn'] = v.MetricColumn;
        e['FeatureCombinations'] = v.FeatureCombinations;
        e['Features'] = v.Features;

        const w = result[this.configResutls];
        const f = this.outputInflowMeasureToBeShown
        f['MeasureAnalysisInferences'] = w[0].MeasureAnalysisInferences;
      }
    })
  }


   /* ------------------- Initialize Property actions ------------------------*/
  setConfigVariables() {
    this.inputInflowDataToBeShown = {
      'DateColumn': '',
      'TrendForecast': '',
      'Frequency': '',
      'Dimensions': ''
    } 

    this.inputInflowMeasureToBeShown = {
      'DateColumn': '',
      'MetricColumn': '',
      'FeatureCombinations': '',
      'Features': ''
    } 

    this.outputInflowDataToBeShown = {
      'VolumetricInferences': ''
    }

    this.outputInflowMeasureToBeShown = {
      'MeasureAnalysisInferences': ''
    }
    this.correlationId = this.autoSampleGeneratedIE[0].CorrelationId;
    this.modelName = this.autoSampleGeneratedIE[0].ModelName;
  }

  /* ------------------- Button actions ------------------------*/
  configurationView() {
  this.router.navigate(['ieConfigurationDetails'],
  {
    queryParams: {
        'correlationId': this.correlationId,
        'autoGenerated': true,
        'modelName': this.modelName,
        'analysis': 'multiple'
    }
   })
  }

  expandMAll() {
    this.measureaccordian = {
      'acc0': false,
      'acc1': false,
      'expandAll': false
    }
  }

  collapseMAll() {
    this.measureaccordian = {
      'acc0': true,
      'acc1': true,
      'expandAll': true
    }
  }

  expandDAll() {
    this.dataInflowaccordian = {
    'accOutput0': false,
    'accOutput1': false,
    'accOutput2': false,
    'expandAll': false
    }
  }

  collapseDAll() {
    this.dataInflowaccordian = {
      'accOutput0': true,
    'accOutput1': true,
    'accOutput2': true,
    'expandAll': true
    }
  }
  
}
