import { animate, state, style, transition, trigger, } from '@angular/animations';
import { Component, OnInit, Input, ChangeDetectionStrategy } from '@angular/core';
import { Router } from '@angular/router';
import { AppUtilsService } from 'src/app/_services/app-utils.service';
import { CoreUtilsService } from 'src/app/_services/core-utils.service';
import { NotificationService } from 'src/app/_services/notification-service.service';
import { IeConfigurationService } from '../ie-configuration/ie-configuration.service';
import { PublishedUseCaseService } from '../published-use-case/published-use-case.service';
import { InferenceModelsService } from './inference-models.service';


@Component({
  selector: 'app-inference-models',
  templateUrl: './inference-models.component.html',
  styleUrls: ['./inference-models.component.css'],
  animations: [
    trigger('detailExpand', [
      state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
      state('expanded', style({ height: '*', visibility: 'visible' })),
      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
  ]
})
export class InferenceModelsComponent implements OnInit {
  @Input() listOfIEModels;  // Use once API gives data
  @Input() paramData;
  columnsToDisplay = ['selection', 'Model Name', 'Data Source', 'CreatedOn', 'Entity', 'Status', 'Action Item', 'deleteAction'];
  uploadedInferencesList: any = [];

  autoSampleGeneratedIE: any;
  manualConfigGeneratedIE: any;
  isDeleteActionPerformed: boolean = false;
  isAutoGeneratedIE: string;
  selectedIEModel: any;
  UseCaseDescription = false;
  createUsePayload = {
    'UseCaseName': '',
    'UseCaseDescription': '',
    'CorrelationId': '',
    'ApplicationId': '',
    'UserId': ''
  }
  applicationList;
  publishInferencePayload = [];
  newapplicationName;

  entityLength;
  modelCreatedwith;
  environment;
  isModelCreatedUsingEntity;
  
  constructor(private inferenceModelService: InferenceModelsService, private notificationService: NotificationService,
    private _appUtilsService: AppUtilsService, private ieConfig: IeConfigurationService, private ps: PublishedUseCaseService,
    private coreUtilService: CoreUtilsService, private router: Router) { }

  ngOnInit(): void {
    this.environment = sessionStorage.getItem('Environment');
    this.uploadedInferencesList = this.listOfIEModels;
    this.createUsePayload.UserId = this._appUtilsService.getCookies().UserId;
    this.createUsePayload.ApplicationId = this.ieConfig.application.ApplicationID;
  }

  /* ------------------- Radio Button Action ------------------------*/
  selectIEModel(iEModel) {
    // api/GetModelInferences?correlationId=18e714ca-e137-4065-93b6-5fbd2329f655&applicationId&inferenceconfigId&autogenerated=true
    this.autoSampleGeneratedIE = [];
    this.manualConfigGeneratedIE = [];
    this.isAutoGeneratedIE = null;
    this.selectedIEModel = iEModel;
    // this.applicationList = [this.ieConfig.application];
    this.getApplications();
    this.createUsePayload.CorrelationId = iEModel.CorrelationId;
    if (iEModel.Status && iEModel.Status !== 'E') {
      this._appUtilsService.loadingStarted();
      this.inferenceModelService.getModelInferences(iEModel.CorrelationId).subscribe(
        (data) => {
          // if InferenceSourceType is Manual then 
          if (data && data.length > 0) {
            let configGeneratedAfterPublishIfNotE = [];
            let configGeneratedAfterPublishIfNotC = [];
            data.forEach(entry => {
              if (entry.InferenceSourceType === 'AutoGenerated') {
                this.autoSampleGeneratedIE.push(entry);
                this.ieConfig.autoSampleGeneratedIE = this.autoSampleGeneratedIE;                
              } else if (entry.InferenceSourceType === 'Manual') {
                this.manualConfigGeneratedIE.push(entry); // Development inprogress
                if (entry.Status !== 'E') {
                  configGeneratedAfterPublishIfNotE.push(entry.Status);
                }

                if (entry.Status !== 'C') {
                  configGeneratedAfterPublishIfNotC.push(entry.Status);
                }
              }
            });            
           
            this.modelCreatedwith = this.listOfIEModels.filter(val => val.CorrelationId === data[0].CorrelationId);
            // this.isAutoGeneratedIE = this.autoSampleGeneratedIE.length > 0;
            if (this.manualConfigGeneratedIE.length > 0) {
              this.isAutoGeneratedIE = 'false';
              this.onApplicationName(iEModel.CorrelationId);
            } else if (this.autoSampleGeneratedIE.length > 0) {
              this.isAutoGeneratedIE = 'true';
            }
            if (iEModel.IsIEPublish && configGeneratedAfterPublishIfNotC.length > 0 && configGeneratedAfterPublishIfNotC.length > 0) {
              this.notificationService.success('Data Ingestion is completed. Configuration details are being generated. Please wait and click on Refresh icon to view the updated details.');
            }
            this._appUtilsService.loadingEnded();
          } else {
            if (!iEModel.IsIEPublish && iEModel.Status !== 'P') {
              this.isAutoGeneratedIE = 'showAddButton';
              this.notificationService.warning('Autogenerated Inferences could not be generated for your data. Please Add Configuration to generate inferences for the measure of your choice');

            } else if (iEModel.Status === 'P') {
              this.notificationService.warning('Model training is In-Progress')
            } else if (iEModel.IsIEPublish && data.length === 0) {
              this.notificationService.success('Data Ingestion is completed. Configuration details are being generated. Please wait and click on Refresh icon to view the updated details.');
            }
            this._appUtilsService.loadingEnded();
          }
        }, (error) => {
          this.isAutoGeneratedIE = null;
          this.notificationService.error(error.error);
          this._appUtilsService.loadingEnded();
        }
      )
    } else {
      if (iEModel.Message) {
        this.notificationService.error(iEModel.Message);
      } else {
        this.notificationService.error('Data was not ingested properly. Please upload the data again and create a new model.');
      }
    }
  }

  onApplicationName(correlationId) {
    // correlationId=eb54e08d-373b-4341-8408-c6cca080379d&applicationId=&inferenceconfigId=
    this._appUtilsService.loadingImmediateEnded();
    this._appUtilsService.loadingStarted();
    this.inferenceModelService.getPublishedInferences({
      'correlationId': correlationId, 'applicationId': this.ieConfig.application.ApplicationID,
      'inferenceconfigId': ''
    }).subscribe(
      (data) => {
        if (data.length != 0) {
          this.publishInferencePayload = data;
        } else {

        }
        this._appUtilsService.loadingEnded();
      },
      (error) => {
        this.notificationService.error(error.error);
        this._appUtilsService.loadingEnded();
      }
    )
  }

  /* ------------------- Delete Button Action ------------------------*/
  deleteIEModel(correlationId) {
    // DeleteIEModel?correlationId=26a82223-3372-4ab3-80a0-c1a286da9401 
    this.isDeleteActionPerformed = true;
    this.inferenceModelService.deleteIEModel(correlationId).subscribe(
      (data) => {
        this.notificationService.success('Deleted succesfully.')
        this.isDeleteActionPerformed = false;
        this.refreshList();
      },
      (error) => {
        this.notificationService.error(error.error)
        this.isDeleteActionPerformed = false;
      }
    )
  }

  /* ------------------- Refresh List of Models ------------------------*/
  refreshList(event?) {
    this.autoSampleGeneratedIE = [];
    this.manualConfigGeneratedIE = [];
    this.isAutoGeneratedIE = null;
    this.inferenceModelService.getIEModel(this.paramData.clientUID, this.paramData.deliveryConstructUId, this._appUtilsService.getCookies().UserId).subscribe(
      (data) => {
        console.log(data);
        if (data.length > 0) {
          this.uploadedInferencesList = data;
        } else {
          this.uploadedInferencesList = [];
        }
      },
      (error) => {
        this.notificationService.error('Something went wrong');
      }
    )
  }

  showUsecaseModal(iEModel) {
    if (this.selectedIEModel.CorrelationId == iEModel.CorrelationId && this.manualConfigGeneratedIE.length > 0) {
      this.UseCaseDescription = true
      this.createUsePayload.CorrelationId = iEModel.CorrelationId;
    } else {
      this.notificationService.error('Please add atleast one configuration in the model to Save the Use Case')
    }
  }

  createUseCase(appId) {
    const valid = this.coreUtilService.isSpecialCharacter(this.createUsePayload.UseCaseName + '' + this.createUsePayload.UseCaseDescription);
    if (valid === 0) {
      return 0;
    }
    this.createUsePayload.ApplicationId = (appId.value) || this.ieConfig.application.ApplicationID;
    if (this.createUsePayload.UseCaseName && this.createUsePayload.UseCaseDescription) {
      this.UseCaseDescription = false;
      this._appUtilsService.loadingStarted();
      this.ps.createUseCase(this.createUsePayload).subscribe(
        (data) => {
          //   {
          //     "Status": "C",
          //     "Message": "Success"
          // }

          if (data && data['Status'] === 'C') {
            this.notificationService.success('Use Case Saved successfully');
          }
          if (data && data['Status'] === 'E') {
            this.notificationService.success(data['Message']);
          }
          this._appUtilsService.loadingEnded();
        },
        (error) => {
          this._appUtilsService.loadingEnded();
          this.notificationService.success(error);
        }
      )
    } else {
      this.notificationService.error('Enter appropiate value');
    }
  }

  createNewApplication() {
    const providedName = this.newapplicationName;
    const valid = this.coreUtilService.isSpecialCharacter(providedName);
    if (valid === 0) {
      return 0;
    }

    const params = {
      "ApplicationName": providedName,
      "BaseURL": "",
      "CreatedByUser": this._appUtilsService.getCookies().UserId,
      "clientUId": this.paramData.clientUID,
      "deliveryConstructUID": this.paramData.deliveryConstructUId,
      'Environment': sessionStorage.getItem('Environment')
    }
    this.inferenceModelService.addApplication(params).subscribe(
      (data) => {
        this.notificationService.success('Application added succesfully');
        this.getApplications();
      },
      (error) => {
        this.notificationService.error(error.error);
      }
    )
  }

  getApplications() {
    const env = sessionStorage.getItem('Environment') ? sessionStorage.getItem('Environment') : '';

    this.inferenceModelService.getApplications(env).subscribe(
      (data) => {
        if (data.length > 0) {
          this.applicationList = data;
        }
      },
      (error) => {
        this.applicationList = [];
        // this.ieConfigService.application = null;
      }
    )
  }

  /* ------------------- Button actions ------------------------*/
  configurationView() {
    this.router.navigate(['ieConfigurationDetails'],
      {
        queryParams: {
          'correlationId': this.selectedIEModel.CorrelationId,
          'autoGenerated': true,
          'modelName': this.selectedIEModel.ModelName,
          'analysis': 'multiple'
        }
      })
  }
}
